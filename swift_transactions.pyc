cimport cython
import logging
import yaml
import aiohttp

# Configure logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

@cython.boundscheck(False)
@cython.wraparound(False)
def initialize_elasticsearch(config_path: str) -> Elasticsearch:
    """
    Initialize Elasticsearch client with host and port from the YAML configuration file.

    Parameters:
    - config_path (str): Path to the YAML configuration file.

    Returns:
    - Elasticsearch: An instance of the Elasticsearch client.
    """
    with open(config_path, 'r') as file:
        config = yaml.safe_load(file)
    
    es_host = config.get('elasticsearch', {}).get('host', 'localhost')
    es_port = config.get('elasticsearch', {}).get('port', 9200)
    
    cdef Elasticsearch es = Elasticsearch([{"host": es_host, "port": es_port}])
    return es

@cython.boundscheck(False)
@cython.wraparound(False)
async def fetch_swift_transactions(es: Elasticsearch, config_path: str) -> None:
    """
    Fetch SWIFT transactions asynchronously and index them into Elasticsearch.

    Parameters:
    - es (Elasticsearch): An instance of the Elasticsearch client.
    - config_path (str): Path to the YAML configuration file.
    """
    cdef str headers = {
        "Authorization": f"Bearer {SWIFT_API_KEY}:{SWIFT_API_SECRET}",
        "Content-Type": "application/json"
    }
    
    async with aiohttp.ClientSession(headers=headers) as session:
        async with session.get(SWIFT_GPI_API_URL) as response:
            transactions = await response.json()
            actions = [{"_index": index_name, "_source": transaction} for transaction in transactions]
            bulk_index_with_retry(es, actions, index_name)
            logging.info(f"{len(transactions)} transactions indexed in Elasticsearch.")

@cython.boundscheck(False)
@cython.wraparound(False)
@on_exception(expo, (aiohttp.ClientError,), max_tries=8)
async def bulk_index_with_retry(es: Elasticsearch, actions: list, index_name: str) -> None:
    """
    Bulk index documents with retry logic.

    Parameters:
    - es (Elasticsearch): An instance of the Elasticsearch client.
    - actions (list): A list of actions to perform.
    - index_name (str): The name of the Elasticsearch index to use.
    """
    helpers.bulk(es, actions)

# Main function
if __name__ == "__main__":
    config_path = 'config.yaml'
    es = initialize_elasticsearch(config_path)
    asyncio.run(fetch_swift_transactions(es, config_path))
